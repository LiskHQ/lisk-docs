"use strict";(self.webpackChunklisk_docs=self.webpackChunklisk_docs||[]).push([[1169],{4556:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var o=t(5893),i=t(1151);const l={title:"Deploying a new ERC-721 token on Lisk",description:"A guide on how to deploy a new ERC-721 token on Lisk.",keywords:["Lisk","Token development","Deploy token","ERC","EIP","ERC-721","NFT"]},c="How to deploy a new ERC-721 token on Lisk",r={id:"building-on-lisk/token-development/deploy-erc-721",title:"Deploying a new ERC-721 token on Lisk",description:"A guide on how to deploy a new ERC-721 token on Lisk.",source:"@site/docs/building-on-lisk/token-development/deploy-erc-721.md",sourceDirName:"building-on-lisk/token-development",slug:"/building-on-lisk/token-development/deploy-erc-721",permalink:"/lisk-documentation/building-on-lisk/token-development/deploy-erc-721",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Deploying a new ERC-721 token on Lisk",description:"A guide on how to deploy a new ERC-721 token on Lisk.",keywords:["Lisk","Token development","Deploy token","ERC","EIP","ERC-721","NFT"]},sidebar:"documentationSidebar",previous:{title:"Deploying a new ERC-20 token on Lisk",permalink:"/lisk-documentation/building-on-lisk/token-development/deploy-erc-20"},next:{title:"Deploying a new ERC-1155 token on Lisk",permalink:"/lisk-documentation/building-on-lisk/token-development/deploy-erc-1155"}},s={},d=[{value:"1. Open Remix",id:"1-open-remix",level:2},{value:"2. Create a new file",id:"2-create-a-new-file",level:2},{value:"3. Copy the example contract",id:"3-copy-the-example-contract",level:2},{value:"4. Compile the contract",id:"4-compile-the-contract",level:2},{value:"5. Deploy the contract",id:"5-deploy-the-contract",level:2},{value:"6. Verify the contract",id:"6-verify-the-contract",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"how-to-deploy-a-new-erc-721-token-on-lisk",children:"How to deploy a new ERC-721 token on Lisk"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["We will use Remix IDE for smart contract development in this guide, but feel free to choose a ",(0,o.jsx)(n.a,{href:"/category/building-on-lisk/deploying-smart-contract",children:"smart contract development framework"})," of your choice to implement your token contract."]})}),"\n",(0,o.jsx)(n.h2,{id:"1-open-remix",children:"1. Open Remix"}),"\n",(0,o.jsxs)(n.p,{children:["Navigate to ",(0,o.jsx)(n.a,{href:"https://remix.ethereum.org",children:"Remix"})," in your browser."]}),"\n",(0,o.jsx)(n.h2,{id:"2-create-a-new-file",children:"2. Create a new file"}),"\n",(0,o.jsxs)(n.p,{children:["Inside the ",(0,o.jsx)(n.code,{children:"contracts"}),' folder, click the \ud83d\udcc4 ("Create new file") button to create a new empty Solidity file.\nYou can name this file whatever you\'d like, e.g., ',(0,o.jsx)(n.code,{children:"MyNFT.sol"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"3-copy-the-example-contract",children:"3. Copy the example contract"}),"\n",(0,o.jsx)(n.p,{children:"Copy the following example contract into your new file:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport "@openzeppelin/contracts/token/ERC721/ERC721.sol";\n\ncontract MyNFT is ERC721 {\n    uint256 public currentTokenId;\n\n    constructor() ERC721("My NFT", "MNFT") {}\n\n    function mint(address recipient) public returns (uint256) {\n        uint256 newItemId = ++currentTokenId;\n        _safeMint(recipient, newItemId);\n        return newItemId;\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"4-compile-the-contract",children:"4. Compile the contract"}),"\n",(0,o.jsxs)(n.p,{children:["Please double-check that the compiler version of the Remix IDE is matching  with the compiler version mentioned in the smart contract: ",(0,o.jsx)(n.code,{children:"pragma solidity ^0.8.28;"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Press the green play button at the top to compile the contract."}),"\n",(0,o.jsx)(n.h2,{id:"5-deploy-the-contract",children:"5. Deploy the contract"}),"\n",(0,o.jsxs)(n.p,{children:["Open the ",(0,o.jsx)(n.code,{children:"Deploy & run transactions"}),' tab (this looks like an Ethereum logo with an arrow pointing right).\nMake sure that your environment is set to "Injected Provider", your wallet is connected to Lisk or Lisk Sepolia network, and Remix has access to your wallet.\nThen, select the ',(0,o.jsx)(n.code,{children:"MyNFT"})," contract from the deployment dropdown and click the orange ",(0,o.jsx)(n.code,{children:"Deploy"})," button to deploy the contract and confirm the contract deployment in your connected wallet."]}),"\n",(0,o.jsxs)(n.p,{children:["Check the Remix log messages; they should include the contract address.\nPaste this address in BlockScout, to see the contract in the Lisk blockchain explorer: ",(0,o.jsx)(n.a,{href:"https://sepolia-blockscout.lisk.com/address/0x73e7a94dD5760d862F6FD9f8ea5D4245Bb143446",children:"https://sepolia-blockscout.lisk.com/address/0x73e7a94dD5760d862F6FD9f8ea5D4245Bb143446"})]}),"\n",(0,o.jsx)(n.h2,{id:"6-verify-the-contract",children:"6. Verify the contract"}),"\n",(0,o.jsx)(n.p,{children:"If you want to interact with your contract on the block explorer, you, or someone else needs to verify it first.\nThe above contract has already been verified, so you should be able to view your version on a block explorer already.\nFor the remainder of this guide, we'll walk through how to verify your contract with Remix on the Lisk Sepolia Testnet."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["In Remix, rightlick on the contract you wish to verify and select ",(0,o.jsx)(n.code,{children:"Flatten"}),".\nThis will create a new file ",(0,o.jsx)(n.code,{children:"MyNFT_flattened.sol"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Now, switch to your ",(0,o.jsx)(n.a,{href:"https://sepolia-blockscout.lisk.com/address/0x73e7a94dD5760d862F6FD9f8ea5D4245Bb143446",children:"newly deployed contract"})," on ",(0,o.jsx)(n.a,{href:"https://sepolia-blockscout.lisk.com/",children:"https://sepolia-blockscout.lisk.com/"})]}),"\n",(0,o.jsxs)(n.li,{children:["Go to the contract tab and click on the blue ",(0,o.jsx)(n.code,{children:"Verify and Publish"})," button.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"(Optional) Set a license for your contract."}),"\n",(0,o.jsxs)(n.li,{children:["Choose ",(0,o.jsx)(n.code,{children:"Solidity (Single file)"})," as the verification method."]}),"\n",(0,o.jsx)(n.li,{children:"Choose the fitting compiler version for your contract."}),"\n",(0,o.jsx)(n.li,{children:"Disable code optimization."}),"\n",(0,o.jsxs)(n.li,{children:["Copy the flattened source code from Remix and paste it into the ",(0,o.jsx)(n.code,{children:"Enter the Solidity Contract Code"})," field."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Check that all info is correct and click the ",(0,o.jsx)(n.code,{children:"Verify and Publish"})," button, to verify your contract."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Once verified, the code tab will include the \u2705 icon, and the source code will be viewable."})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>c});var o=t(7294);const i={},l=o.createContext(i);function c(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);