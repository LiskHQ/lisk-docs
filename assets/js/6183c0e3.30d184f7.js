"use strict";(self.webpackChunklisk_docs=self.webpackChunklisk_docs||[]).push([[444],{1269:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>g,frontMatter:()=>r,metadata:()=>c,toc:()=>h});var s=t(5893),i=t(1151),l=t(4866),o=t(5162);const r={title:"Lisk L1->L2 migration guide",slug:"/building-on-lisk/migration-guide",description:"A migration guide, explaining how to smoothly migrate any Lisk L1 app to Lisk L2.",keywords:["Lisk","Lisk migration","Lisk L1","Lisk L2","Lisk testnet","Lisk SDK","Solidity","smart contract development","build on lisk"]},a="Lisk L1->L2 migration guide",c={id:"building-on-lisk/migration-guide",title:"Lisk L1->L2 migration guide",description:"A migration guide, explaining how to smoothly migrate any Lisk L1 app to Lisk L2.",source:"@site/docs/building-on-lisk/migration-guide.mdx",sourceDirName:"building-on-lisk",slug:"/building-on-lisk/migration-guide",permalink:"/lisk-documentation/building-on-lisk/migration-guide",draft:!1,unlisted:!1,editUrl:"https://github.com/LiskHQ/lisk-documentation/tree/main/docs/building-on-lisk/migration-guide.mdx",tags:[],version:"current",frontMatter:{title:"Lisk L1->L2 migration guide",slug:"/building-on-lisk/migration-guide",description:"A migration guide, explaining how to smoothly migrate any Lisk L1 app to Lisk L2.",keywords:["Lisk","Lisk migration","Lisk L1","Lisk L2","Lisk testnet","Lisk SDK","Solidity","smart contract development","build on lisk"]},sidebar:"documentationSidebar",previous:{title:"Deploying a smart contract with Hardhat",permalink:"/lisk-documentation/building-on-lisk/deploying-a-smart-contract"},next:{title:"Bridges",permalink:"/lisk-documentation/lisk-tools/bridges"}},d={},h=[{value:"Requirements",id:"requirements",level:2},{value:"Project setup",id:"project-setup",level:2},{value:"Module migration",id:"module-migration",level:2},{value:"Table: Lisk L1/L2 comparison",id:"table-lisk-l1l2-comparison",level:3},{value:"Storage",id:"storage",level:3},{value:"Events",id:"events",level:3},{value:"State transition logic",id:"state-transition-logic",level:3},{value:"Configuration",id:"configuration",level:4},{value:"Verification",id:"verification",level:4},{value:"Execution",id:"execution",level:4},{value:"Endpoints",id:"endpoints",level:3},{value:"Next steps",id:"next-steps",level:2},{value:"Testing the smart contract",id:"testing-the-smart-contract",level:3},{value:"Smart contract deployment",id:"smart-contract-deployment",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",strong:"strong",sup:"sup",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"lisk-l1-l2-migration-guide",children:"Lisk L1->L2 migration guide"}),"\n",(0,s.jsx)(n.p,{children:"How to smoothly migrate any Lisk L1 app to Lisk L2."}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsx)(n.p,{children:"You need:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A Lisk L1 application built on ",(0,s.jsx)(n.a,{href:"https://github.com/LiskHQ/lisk-sdk",children:"Lisk SDK"})," version 6.0.0 or later."]}),"\n",(0,s.jsxs)(n.li,{children:["A basic understanding of ",(0,s.jsx)(n.a,{href:"https://soliditylang.org/",children:"Solidity"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The smart contract development framework of your choice.\nIn this guide, we will use the ",(0,s.jsx)(n.a,{href:"https://book.getfoundry.sh/",children:"Foundry"})," framework."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"project-setup",children:"Project setup"}),"\n",(0,s.jsxs)(n.p,{children:["To illustrate the migration process, we will use the ",(0,s.jsx)(n.a,{href:"https://github.com/LiskHQ/lisk-sdk-examples/tree/development/tutorials/hello/hello_client/src/app/modules/hello",children:"Hello module"})," from Lisk L1, and migrate it to Lisk L2."]}),"\n",(0,s.jsx)(n.p,{children:"To start with the project migration, first create a new project with Foundry like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"forge init hello_liskl2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will create a new folder ",(0,s.jsx)(n.code,{children:"hello_liskl2"}),", which will contain the smart contracts we are going to implement."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd hello_liskl2\n"})}),"\n",(0,s.jsx)(n.h2,{id:"module-migration",children:"Module migration"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Modules in Lisk L1"})," are re-implemented as ",(0,s.jsx)(n.strong,{children:"smart contracts in Lisk L2."})]})}),"\n",(0,s.jsxs)(n.p,{children:["To create a new smart contract, create a new file ",(0,s.jsx)(n.code,{children:"Hello.sol"})," under ",(0,s.jsx)(n.code,{children:"src/"})," and add the following content:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/src/Hello.sol"',children:"// SPDX-License-Identifier: MIT\n// compiler version must be greater than or equal to 0.8.20 and less than 0.9.0\npragma solidity ^0.8.20;\n\ncontract Hello {\n\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Inside the new contract, we will put all the logic that was residing in the Lisk L1 ",(0,s.jsx)(n.code,{children:"Hello"})," module before."]}),"\n",(0,s.jsx)(n.h3,{id:"table-lisk-l1l2-comparison",children:"Table: Lisk L1/L2 comparison"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Description"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Lisk L1"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Lisk L2"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Onchain business logic"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Module"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.a,{href:"https://solidity-by-example.org/first-app/",children:"Smart contract"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Onchain data storage"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Stores (onchain)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.a,{href:"https://solidity-by-example.org/variables/",children:"State variables"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Logging to the blockchain"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Blockchain Events"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.a,{href:"https://solidity-by-example.org/events/",children:"Events"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"State-transition logic triggered by a transaction"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Commands"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.a,{href:"https://solidity-by-example.org/function/",children:"Functions"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"API"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Endpoints"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.a,{href:"https://solidity-by-example.org/view-and-pure-functions/",children:"View functions"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Internal API"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Methods"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.a,{href:"https://solidity-by-example.org/function-modifier/",children:"Functions (+ modifiers)"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Logic triggered per block"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Lifecycle Hooks"}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["X",(0,s.jsx)(n.sup,{children:(0,s.jsx)(n.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})]})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"storage",children:"Storage"}),"\n",(0,s.jsx)(n.p,{children:"Migrate the onchain stores of a module by implementing corresponding state variables in the contract as shown below."}),"\n",(0,s.jsxs)(l.Z,{children:[(0,s.jsx)(o.Z,{value:"liskl1",label:"Lisk L1",children:(0,s.jsxs)(l.Z,{children:[(0,s.jsx)(o.Z,{value:"message",label:"Message Store",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="hello_client/src/app/modules/hello/stores/message.ts"',children:"import { BaseStore } from 'lisk-sdk';\n\nexport interface MessageStoreData {\n    message: string;\n}\n\nexport const messageStoreSchema = {\n    $id: '/hello/message',\n    type: 'object',\n    required: ['message'],\n    properties: {\n        message: {\n            dataType: 'string',\n            fieldNumber: 1,\n        },\n    },\n};\n\nexport class MessageStore extends BaseStore<MessageStoreData> {\n    public schema = messageStoreSchema;\n}\n"})})}),(0,s.jsx)(o.Z,{value:"counter",label:"Counter Store",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="hello_client/src/app/modules/hello/stores/counter.ts"',children:"import { BaseStore } from 'lisk-sdk';\n\nexport interface CounterStoreData {\n  counter: number;\n}\n\nexport const counterKey = Buffer.alloc(0);\n\nexport const counterStoreSchema = {\n  $id: '/hello/counter',\n  type: 'object',\n  required: ['counter'],\n  properties: {\n    counter: {\n      dataType: 'uint32',\n      fieldNumber: 1,\n    },\n  },\n};\n\nexport class CounterStore extends BaseStore<CounterStoreData> {\n  public schema = counterStoreSchema;\n}\n"})})})]})}),(0,s.jsx)(o.Z,{value:"liskl2",label:"Lisk L2",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/src/Hello.sol"',children:"// SPDX-License-Identifier: MIT\n// compiler version must be greater than or equal to 0.8.20 and less than 0.9.0\npragma solidity ^0.8.20;\n\ncontract Hello {\n  /** State variables */\n  // State variable for the Hello messages\n  mapping(address => string) public message;\n  // State variable for the message counter\n  uint32 public counter = 0;\n}\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,s.jsx)(n.p,{children:"Migrate the blockchain events of a module by implementing corresponding events in the contract as shown below."}),"\n",(0,s.jsxs)(l.Z,{children:[(0,s.jsx)(o.Z,{value:"liskl1",label:"Lisk L1",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="hello_client/src/app/modules/hello/events/new_hello.ts"',children:"import { BaseEvent } from 'lisk-sdk';\n\nexport const newHelloEventSchema = {\n  $id: '/hello/events/new_hello',\n  type: 'object',\n  required: ['senderAddress', 'message'],\n  properties: {\n    senderAddress: {\n      dataType: 'bytes',\n      fieldNumber: 1,\n    },\n    message: {\n      dataType: 'string',\n      fieldNumber: 2,\n    },\n  },\n};\n\nexport interface NewHelloEventData {\n  senderAddress: Buffer;\n  message: string;\n}\n\nexport class NewHelloEvent extends BaseEvent<NewHelloEventData> {\n  public schema = newHelloEventSchema;\n}\n"})})}),(0,s.jsx)(o.Z,{value:"liskl2",label:"Lisk L2",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/src/Hello.sol"',children:"// SPDX-License-Identifier: MIT\n// compiler version must be greater than or equal to 0.8.20 and less than 0.9.0\npragma solidity ^0.8.20;\n\ncontract Hello {\n  /** State variables */\n  // State variable for the Hello messages\n  mapping(address => string) public message;\n  // State variable for the message counter\n  uint32 public counter = 0;\n\n  /** Events */\n  // Event for new Hello messages\n  event NewHello(address indexed sender, string message);\n}\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"state-transition-logic",children:"State transition logic"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Configuration migration"}),(0,s.jsx)(n.h4,{id:"configuration",children:"Configuration"}),(0,s.jsxs)(n.p,{children:["The module-specific configurations, which resided in the ",(0,s.jsx)(n.code,{children:"config.json"})," on Lisk L1, are now part of the smart contract itself, and defined as state variables."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/src/Hello.sol"',children:'// Blacklist of words that are not allowed in the Hello message\nstring[] public blacklist = ["word1","word2"];\n// Maximum length of the Hello message\nuint32 public maxLength = 200;\n// Minimum length of the Hello message\nuint32 public minlength = 3\n'})}),(0,s.jsx)(n.p,{children:"To edit the configuration options of the Hello module, we implement the following functions in the Hello contract:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"setBlacklist()"})," to configure the blacklist of words that are not allowed in the Hello message."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"setMinMaxMessageLength()"})," to configure the minimum and maximum length of the Hello message."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/src/Hello.sol"',children:"// Function to configure the blacklist\nfunction setBlacklist(string[] memory _newWord) public onlyOwner {\n    blacklist = _newWord;\n} \n// Function to configure min/max message length\nfunction setMinMaxMessageLength(uint32 _newMin,uint32 _newMax) public onlyOwner {\n    minlength = _newMin;\n    maxLength = _newMax;\n}\n"})}),(0,s.jsx)(n.p,{children:"As seen in the above code snippet, we add the following modifiers to the functions:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"public"})," to make the function callable from outside the contract.\nThis is a default visibility modifier for functions in Solidity."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onlyOwner"})," to check that the caller is the owner of the contract.\nThis is a custom modifier that we need to implement in the contract manually, as shown in the example below."]}),"\n"]}),(0,s.jsxs)(n.p,{children:["To set the owner of the contract, we add a new state variable ",(0,s.jsx)(n.code,{children:"owner"})," and a constructor which sets the ",(0,s.jsx)(n.code,{children:"owner"})," variable to the account address that deploys the contract."]}),(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["For updating the owner of the smart contract, you can imeplemnt a corresponding function ",(0,s.jsx)(n.code,{children:"setOwner()"})," and use the ",(0,s.jsx)(n.code,{children:"onlyOwner"})," modifier to ensure that only the current owner can call this function."]})}),(0,s.jsxs)(n.p,{children:["Finally, we can check for the message sender being the owner of the contract in the ",(0,s.jsx)(n.code,{children:"onlyOwner"})," modifier which is used for the ",(0,s.jsx)(n.code,{children:"setBlacklist()"})," and ",(0,s.jsx)(n.code,{children:"setMinMaxMessageLength()"})," functions."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/src/Hello.sol"',children:'// Address of the contract owner\naddress public owner;\n\nconstructor() {\n    // Set the transaction sender as the owner of the contract.\n    owner = msg.sender;\n}\n\n/** Modifiers */\n// Modifier to check that the caller is the owner of the contract.\nmodifier onlyOwner() {\n    require(msg.sender == owner, "Not owner");\n    _;\n}\n'})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Verification migration"}),(0,s.jsx)(n.h4,{id:"verification",children:"Verification"}),(0,s.jsx)(n.p,{children:"To verify the Hello message, we implement custom modifiers in the contract."}),(0,s.jsxs)(n.p,{children:["Inside of the modifiers, we check the length of the message and if it contains any blacklisted words, like it was done in the ",(0,s.jsx)(n.code,{children:"verify()"})," method of the Lisk L1 Hello module."]}),(0,s.jsxs)(n.p,{children:["To check the length of strings conviniently, we use the ",(0,s.jsx)(n.code,{children:"Strings"})," library, which is part of the Solidity Util library."]}),(0,s.jsxs)(n.p,{children:["You can add ",(0,s.jsx)(n.code,{children:"solidity-util"})," to your projects dependencies by running the following command:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="hello_liskl2/"',children:"forge install willitscale/solidity-util\n"})}),(0,s.jsxs)(n.p,{children:["Now import the ",(0,s.jsx)(n.code,{children:"Strings.sol"})," file in the ",(0,s.jsx)(n.code,{children:"Hello.sol"})," contract and add ",(0,s.jsx)(n.code,{children:"using Strings for string;"})," on top of the contract."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/src/Hello.sol"',children:'pragma solidity ^0.8.20;\nimport "lib/solidity-util/lib/Strings.sol";\n\ncontract Hello {\n    using Strings for string;\n\n    // ....\n}\n'})}),(0,s.jsxs)(n.p,{children:["Then you can conveniently check the length of Hello messages in the ",(0,s.jsx)(n.code,{children:"validLength"})," modifier like this:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/src/Hello.sol"',children:'// Validate message length\nmodifier validLength(string memory _message) {\n    require(_message.length() >= minlength, "Message too short");\n    require(_message.length() <= maxLength, "Message too long");\n    _;\n}\n'})}),(0,s.jsxs)(n.p,{children:["To check if the message contains any blacklisted words, we implement the ",(0,s.jsx)(n.code,{children:"validWords"})," modifier in the contract."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/src/Hello.sol"',children:'// Validate message content\nmodifier validWords(string memory _message) {\n    bytes memory whereBytes = bytes (_message);\n\n    for (uint h = 0; h < blacklist.length; h++) {\n        bool found = false;\n        bytes memory whatBytes = bytes (blacklist[h]);\n        for (uint i = 0; i <= whereBytes.length - whatBytes.length; i++) {\n            bool flag = true;\n            for (uint j = 0; j < whatBytes.length; j++)\n                if (whereBytes [i + j] != whatBytes [j]) {\n                    flag = false;\n                    break;\n                }\n            if (flag) {\n                found = true;\n                break;\n            }\n        }\n        require (!found, "Message contains blacklisted word");\n    }\n    _;\n}\n'})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Execution migration"}),(0,s.jsx)(n.h4,{id:"execution",children:"Execution"}),(0,s.jsxs)(n.p,{children:["To migrate the createHello command execution, we implement the ",(0,s.jsx)(n.code,{children:"createHello()"})," function in the contract."]}),(0,s.jsxs)(n.p,{children:["Inside of this function, we save the message of the sender in the ",(0,s.jsx)(n.code,{children:"message"})," mapping under the sender address."]}),(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["The sender address is a ",(0,s.jsx)(n.a,{href:"https://solidity-by-example.org/variables/",children:"global variable"})," in Solidity and can be accessed with ",(0,s.jsx)(n.code,{children:"msg.sender"}),"."]})}),(0,s.jsxs)(n.p,{children:["Additionally, we increment the Hello message counter by +1, and emit the ",(0,s.jsx)(n.code,{children:"NewHello"})," event, like it was done in the ",(0,s.jsx)(n.code,{children:"execute()"})," method of the Lisk L1 Hello module previously."]}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"validMessage()"})," modifier the we defined above in the Verification section is used to check if the message is valid, before ",(0,s.jsx)(n.code,{children:"createHello()"})," function is executed."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/src/Hello.sol"',children:"// Function to create a new Hello message\nfunction createHello(string calldata _message) public validMessage(_message) {\n    message[msg.sender] = _message;\n    counter+=1;\n    emit NewHello(msg.sender, _message);\n}\n"})})]}),"\n",(0,s.jsxs)(l.Z,{children:[(0,s.jsx)(o.Z,{value:"liskl1",label:"Lisk L1",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="hello_client/src/app/modules/hello/commands/create_hello_command.ts"',children:"/* eslint-disable class-methods-use-this */\n\nimport {\n  BaseCommand,\n  CommandVerifyContext,\n  CommandExecuteContext,\n  VerificationResult,\n  VerifyStatus,\n} from 'lisk-sdk';\nimport { createHelloSchema } from '../schema';\nimport { MessageStore } from '../stores/message';\nimport { counterKey, CounterStore, CounterStoreData } from '../stores/counter';\nimport { ModuleConfig } from '../types';\nimport { NewHelloEvent } from '../events/new_hello';\n\ninterface Params {\n  message: string;\n}\n\nexport class CreateHelloCommand extends BaseCommand {\n  public schema = createHelloSchema;\n  private _blacklist!: string[];\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async init(config: ModuleConfig): Promise<void> {\n    // Set _blacklist to the value of the blacklist defined in the module config\n    this._blacklist = config.blacklist;\n    // Set the max message length to the value defined in the module config\n    this.schema.properties.message.maxLength = config.maxMessageLength;\n    // Set the min message length to the value defined in the module config\n    this.schema.properties.message.minLength = config.minMessageLength;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async verify(context: CommandVerifyContext<Params>): Promise<VerificationResult> {\n    let validation: VerificationResult;\n    const wordList = context.params.message.split(\" \");\n    const found = this._blacklist.filter(value => wordList.includes(value));\n    if (found.length > 0) {\n      context.logger.info(\"==== FOUND: Message contains a blacklisted word ====\");\n      throw new Error(\n          `Illegal word in hello message: ${  found.toString()}`\n        );\n    } else {\n      context.logger.info(\"==== NOT FOUND: Message contains no blacklisted words ====\");\n      validation = {\n        status: VerifyStatus.OK\n      };\n    }\n    return validation;\n  }\n\n  public async execute(context: CommandExecuteContext<Params>): Promise<void> {\n    // 1. Get account data of the sender of the Hello transaction.\n    const { senderAddress } = context.transaction;\n    // 2. Get message and counter stores.\n    const messageSubstore = this.stores.get(MessageStore);\n    const counterSubstore = this.stores.get(CounterStore);\n\n    // 3. Save the Hello message to the message store, using the senderAddress as key, and the message as value.\n    await messageSubstore.set(context, senderAddress, {\n      message: context.params.message,\n    });\n\n    // 3. Get the Hello counter from the counter store.\n    let helloCounter: CounterStoreData;\n    try {\n      helloCounter = await counterSubstore.get(context, counterKey);\n    } catch (error) {\n      helloCounter = {\n        counter: 0,\n      }\n    }\n    // 5. Increment the Hello counter +1.\n    helloCounter.counter+=1;\n\n    // 6. Save the Hello counter to the counter store.\n    await counterSubstore.set(context, counterKey, helloCounter);\n\n    // 7. Emit a \"New Hello\" event\n    const newHelloEvent = this.events.get(NewHelloEvent);\n    newHelloEvent.add(context, {\n      senderAddress: context.transaction.senderAddress,\n      message: context.params.message\n    },[context.transaction.senderAddress]);\n  }\n}\n"})})}),(0,s.jsx)(o.Z,{value:"liskl2",label:"Lisk L2",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/src/Hello.sol"',children:'// SPDX-License-Identifier: MIT\n// compiler version must be greater than or equal to 0.8.20 and less than 0.9.0\npragma solidity ^0.8.20;\nimport "lib/solidity-util/lib/Strings.sol";\n\ncontract Hello {\n    using Strings for string;\n\n    /** State variables */\n    // State variable for the Hello messages\n    mapping(address => string) public message;\n    // State variable for the message counter\n    uint32 public counter = 0;\n    // Address of the contract owner\n    address public owner;\n    // Blacklist of words that are not allowed in the Hello message\n    string[] public blacklist = ["word1","word2"];\n    // Maximum length of the Hello message\n    uint32 public maxLength = 200;\n    // Minimum length of the Hello message\n    uint32 public minlength = 3;\n\n    constructor() {\n        // Set the transaction sender as the owner of the contract.\n        owner = msg.sender;\n    }\n\n    /** Modifiers */\n    // Modifier to check that the caller is the owner of the contract.\n    modifier onlyOwner() {\n        require(msg.sender == owner, "Not owner");\n        _;\n    }\n    // Validate message length\n    modifier validLength(string memory _message) {\n        require(_message.length() >= minlength, "Message too short");\n        require(_message.length() <= maxLength, "Message too long");\n        _;\n    }\n    // Validate message content\n    modifier validWords(string memory _message) {\n        bytes memory whereBytes = bytes (_message);\n\n        for (uint h = 0; h < blacklist.length; h++) {\n            bool found = false;\n            bytes memory whatBytes = bytes (blacklist[h]);\n            for (uint i = 0; i <= whereBytes.length - whatBytes.length; i++) {\n                bool flag = true;\n                for (uint j = 0; j < whatBytes.length; j++)\n                    if (whereBytes [i + j] != whatBytes [j]) {\n                        flag = false;\n                        break;\n                    }\n                if (flag) {\n                    found = true;\n                    break;\n                }\n            }\n            require (!found, "Message contains blacklisted word");\n        }\n        _;\n    }\n\n    /** Events */\n    // Event for new Hello messages\n    event NewHello(address indexed sender, string message);\n\n    /** Functions */\n    // Function to configure the blacklist\n    function setBlacklist(string[] memory _newWord) public onlyOwner {\n        blacklist = _newWord;\n    } \n    // Function to configure min/max message length\n    function setMinMaxMessageLength(uint32 _newMin,uint32 _newMax) public onlyOwner {\n        minlength = _newMin;\n        maxLength = _newMax;\n    }\n    // Function to create a new Hello message\n    function createHello(string calldata _message) public validLength(_message) validWords(_message) {\n        message[msg.sender] = _message;\n        counter+=1;\n        emit NewHello(msg.sender, _message);\n    }\n}\n'})})})]}),"\n",(0,s.jsx)(n.h3,{id:"endpoints",children:"Endpoints"}),"\n",(0,s.jsx)(n.p,{children:"Migrate the module endpoints by implementing corresponding view functions in the contract as shown below."}),"\n",(0,s.jsxs)(l.Z,{children:[(0,s.jsx)(o.Z,{value:"liskl1",label:"Lisk L1",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="hello_client/src/app/modules/hello/endpoint.ts"',children:"export class HelloEndpoint extends BaseEndpoint {\n  public async getHelloCounter(ctx: ModuleEndpointContext): Promise<CounterStoreData> {\n    const counterSubStore = this.stores.get(CounterStore);\n\n    const helloCounter = await counterSubStore.get(\n      ctx,\n      counterKey,\n    );\n\n    return helloCounter;\n  }\n\n  public async getHello(ctx: ModuleEndpointContext): Promise<MessageStoreData> {\n    const messageSubStore = this.stores.get(MessageStore);\n\n    const { address } = ctx.params;\n    if (typeof address !== 'string') {\n      throw new Error('Parameter address must be a string.');\n    }\n    cryptography.address.validateLisk32Address(address);\n    const helloMessage = await messageSubStore.get(\n      ctx,\n      cryptography.address.getAddressFromLisk32Address(address),\n    );\n    return helloMessage;\n  }\n}\n"})})}),(0,s.jsx)(o.Z,{value:"liskl2",label:"Lisk L2",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/src/Hello.sol"',children:"// Function to get the Hello message counter\nfunction getHelloCounter() public view returns (uint32) {\n    return counter;\n}\n// Function to get the Hello message of an address\nfunction getHello(address _address) public view returns (string) {\n    return message[_address];\n}\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,s.jsx)(n.p,{children:"Now that we re-implemented the Hello module from Lisk L1 as a smart contract in Lisk L2, it is possible to directly deploy the Hello contract to Lisk L2 and interact with it."}),"\n",(0,s.jsxs)(n.p,{children:["Before deploying the smart contract to Lisk, it is recommended to ",(0,s.jsx)(n.a,{href:"#testing-the-smart-contract",children:"test it locally"})," by writing corresponding tests for the newly created smart contract.\nOnce the smart contract is ",(0,s.jsx)(n.a,{href:"#smart-contract-deployment",children:"deployed"})," to Lisk, you can ",(0,s.jsx)(n.a,{href:"#interacting-with-the-smart-contract",children:"interact"})," with it by calling its public functions."]}),"\n",(0,s.jsxs)(n.p,{children:["Finally, you can migrate the ",(0,s.jsx)(n.a,{href:"#migration-of-plugins-and-ui",children:"plugins and UI"})," of the Lisk L1 Hello app to be compatible with the new API, to complete the migration process of your Lisk application."]}),"\n",(0,s.jsx)(n.h3,{id:"testing-the-smart-contract",children:"Testing the smart contract"}),"\n",(0,s.jsx)(n.p,{children:"By testing the smart contract, you can verify that the smart contract behaves as expected and that it is free of bugs, before deploying it to Lisk."}),"\n",(0,s.jsxs)(n.p,{children:["Foundry provides a testing framework to support you in writing tests for smart contracts.\nSee ",(0,s.jsx)(n.a,{href:"https://book.getfoundry.sh/forge/tests",children:"Tests - Foundry Book"})," for examples and references regarding the testing framework."]}),"\n",(0,s.jsxs)(n.p,{children:["To test the Hello smart contract, create a new file ",(0,s.jsx)(n.code,{children:"Hello.t.sol"})," under ",(0,s.jsx)(n.code,{children:"test/"})," and add the following content:"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Hello.t.sol"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="hello_liskl2/test/Hello.t.sol"',children:'// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {Test, console} from "forge-std/Test.sol";\nimport {Hello} from "../src/Hello.sol";\n\ncontract HelloTest is Test {\n    Hello public hello;\n    Hello public hello2;\n    address alice = makeAddr("alice");\n    event NewHello(address indexed sender, string message);\n\n    function setUp() public {\n        hello = new Hello();\n    }\n\n    function test_CreateHello() public {\n        // Sets up a prank as Alice with 100 ETH balance\n        // A prank sets msg.sender to the specified address for the next call.\n        hoax(alice, 100 ether);\n        string memory message = "Hello World";\n        // Expect NewHello event\n        vm.expectEmit(true,false,false,false);\n        emit NewHello(address(alice), message);\n        // Create a new Hello message\n        hello.createHello(message);\n        // Check the message\n        assertEq(hello.message(alice),message);\n        // Check if counter = 1\n        assertEq(hello.counter(),1);\n    }\n\n    function test_MinLength() public {\n        hoax(alice, 100 ether);\n        vm.expectRevert("Message too short");\n        hello.createHello("Hi");\n    }\n\n    function test_MaxLength() public {\n        hoax(alice, 100 ether);\n        vm.expectRevert("Message too long");\n        hello.createHello("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean porta neque eget elit tristique pharetra. Pellentesque tempus sollicitudin tortor, ut tempus diam. Nulla facilisi. Donec at neque sapien.");\n    }\n\n    function test_Blacklist() public {\n        hoax(alice, 100 ether);\n        vm.expectRevert("Message contains blacklisted word");\n        hello.createHello("Hello word1");\n    }\n\n    function test_SetBlacklist() public {\n        hoax(alice, 100 ether);\n        hello2 = new Hello();\n        // Create a temporary dynamic array of strings\n        string[] memory bl = new string[](3);\n        bl[0] = "word1";\n        bl[1] = "word3";\n        bl[2] = "word4";\n        hoax(alice, 100 ether);\n        hello2.setBlacklist(bl);\n        string[] memory getBL = new string[](2);\n        getBL[0] = hello2.blacklist(0);\n        getBL[1] = hello2.blacklist(1);\n        assertEq(getBL[0], bl[0]);\n        assertEq(getBL[1], bl[1]);\n    }\n\n    function test_SetBlacklistNotOwner() public {\n        string[] memory bl = new string[](3);\n        bl[0] = "word1";\n        bl[1] = "word3";\n        bl[2] = "word4";\n        hoax(alice, 100 ether);\n        vm.expectRevert("Not owner");\n        hello.setBlacklist(bl);\n    }\n\n    function test_SetMinMaxMessageLength() public {\n        uint32 newMin = 1;\n        uint32 newMax = 500;\n        hoax(alice, 100 ether);\n        hello2 = new Hello();\n        hoax(alice, 100 ether);\n        hello2.setMinMaxMessageLength(newMin,newMax);\n        assertEq(hello2.minLength(), newMin);\n        assertEq(hello2.maxLength(), newMax);\n    }\n\n    function test_SetMinMaxMessageLengthNotOwner() public {\n        uint32 newMin = 1;\n        uint32 newMax = 500;\n        hoax(alice, 100 ether);\n        vm.expectRevert();\n        hello2.setMinMaxMessageLength(newMin,newMax);\n    }\n\n    function test_getHello() public {\n        hoax(alice, 100 ether);\n        hello.createHello("Hello World");\n        assertEq(hello.getHello(alice), "Hello World");\n    }\n\n    function test_getHelloCounter() public {\n        hoax(alice, 100 ether);\n        assertEq(hello.getHelloCounter(), 0);\n        hello.createHello("Hello World");\n        assertEq(hello.getHelloCounter(), 1);\n    }\n}\n'})})]}),"\n",(0,s.jsx)(n.p,{children:"To run the tests, execute the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"forge test\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output should look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Running 8 tests for test/Hello.t.sol:HelloTest\n[PASS] test_Blacklist() (gas: 23772)\n[PASS] test_CreateHello() (gas: 66179)\n[PASS] test_MaxLength() (gas: 14179)\n[PASS] test_MinLength() (gas: 13929)\n[PASS] test_SetBlacklist() (gas: 885276)\n[PASS] test_SetBlacklistNotOwner() (gas: 16978)\n[PASS] test_SetMinMaxMessageLength() (gas: 853243)\n[PASS] test_SetMinMaxMessageLengthNotOwner() (gas: 10889)\nTest result: ok. 8 passed; 0 failed; 0 skipped; finished in 3.35ms\n"})}),"\n",(0,s.jsx)(n.h3,{id:"smart-contract-deployment",children:"Smart contract deployment"}),"\n",(0,s.jsx)(n.p,{children:"You can now deploy the smart contract to Lisk.\nFor this example, we will use the Lisk Sepolia network to deploy the Hello contract."}),"\n",(0,s.jsxs)(n.p,{children:["Add the ",(0,s.jsx)(n.code,{children:"--verify"})," flag to the ",(0,s.jsx)(n.code,{children:"forge create"})," command to directly verify the smart contract on the Lisk network."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"forge create --rpc-url https://rpc.sepolia-api.lisk.com \\\n--etherscan-api-key 123 \\\n--verify \\\n--verifier blockscout \\\n--verifier-url https://sepolia-blockscout.lisk.com/api \\\n--private-key <your-private-key> \\\nsrc/Hello.sol:Hello\n"})}),"\n",(0,s.jsx)(n.p,{children:"If the deployment went successfully, the output should look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"[\u2822] Compiling...\nNo files changed, compilation skipped\nDeployer: 0x3C46A11471f285E36EE8d089473ce98269D1b081\nDeployed to: 0x0a5A1C81F278cAe80d340a4A97E2D7B1c3Ec511a\nTransaction hash: 0x52bb6aab8ceeecef674253ecc0ccfe35baeac7db3cc8e889a9da1f7cf1ce0593\nStarting contract verification...\nWaiting for blockscout to detect contract deployment...\nStart verifying contract `0x0a5A1C81F278cAe80d340a4A97E2D7B1c3Ec511a` deployed on 4202\n\nSubmitting verification for [src/Hello.sol:Hello] 0x0a5A1C81F278cAe80d340a4A97E2D7B1c3Ec511a.\nSubmitted contract for verification:\n\tResponse: `OK`\n\tGUID: `0a5a1c81f278cae80d340a4a97e2d7b1c3ec511a65cf6f72`\n\tURL: https://sepolia-blockscout.lisk.com/address/0x0a5a1c81f278cae80d340a4a97e2d7b1c3ec511a\nContract verification status:\nResponse: `OK`\nDetails: `Unknown UID`\n"})}),"\n",(0,s.jsx)(n.p,{children:"After the smart contract is deployed, you can interact with it by calling its public functions."}),"\n",(0,s.jsx)(n.p,{children:"From here, you can migrate the plugins and UI of the Lisk L1 app to be compatible with the new API, to complete the migration process of your Lisk application."}),"\n",(0,s.jsxs)(n.p,{children:["In case you need further assistance, feel free to reach out to the Lisk community at ",(0,s.jsx)(n.a,{href:"https://lisk.chat",children:"Lisk.chat"}),"."]}),"\n",(0,s.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,s.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{id:"user-content-fn-1",children:["\n",(0,s.jsxs)(n.p,{children:["No direct equivalent in solidity.\nPlease investigate for custom solutions to migrate logic residing in the lifecycle hooks. ",(0,s.jsx)(n.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>o});t(7294);var s=t(512);const i={tabItem:"tabItem_Ymn6"};var l=t(5893);function o(e){let{children:n,hidden:t,className:o}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,s.Z)(i.tabItem,o),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>k});var s=t(7294),i=t(512),l=t(2466),o=t(6550),r=t(469),a=t(1980),c=t(7392),d=t(12);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:i}}=e;return{value:n,label:t,attributes:s,default:i}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function g(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const i=(0,o.k6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,a._X)(l),(0,s.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(i.location.search);n.set(l,e),i.replace({...i.location,search:n.toString()})}),[l,i])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,l=u(e),[o,a]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:l}))),[c,h]=m({queryString:t,groupId:i}),[p,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,l]=(0,d.Nk)(t);return[i,(0,s.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:i}),x=(()=>{const e=c??p;return g({value:e,tabValues:l})?e:null})();(0,r.Z)((()=>{x&&a(x)}),[x]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!g({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);a(e),h(e),f(e)}),[h,f,l]),tabValues:l}}var f=t(2389);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(5893);function y(e){let{className:n,block:t,selectedValue:s,selectValue:o,tabValues:r}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),d=e=>{const n=e.currentTarget,t=a.indexOf(n),i=r[t].value;i!==s&&(c(n),o(i))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=a.indexOf(e.currentTarget)+1;n=a[t]??a[0];break}case"ArrowLeft":{const t=a.indexOf(e.currentTarget)-1;n=a[t]??a[a.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n),children:r.map((e=>{let{value:n,label:t,attributes:l}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>a.push(e),onKeyDown:h,onClick:d,...l,className:(0,i.Z)("tabs__item",x.tabItem,l?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:i}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function w(e){const n=p(e);return(0,b.jsxs)("div",{className:(0,i.Z)("tabs-container",x.tabList),children:[(0,b.jsx)(y,{...e,...n}),(0,b.jsx)(j,{...e,...n})]})}function k(e){const n=(0,f.Z)();return(0,b.jsx)(w,{...e,children:h(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var s=t(7294);const i={},l=s.createContext(i);function o(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);